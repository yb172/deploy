# This workflow build and push a Docker container to Google Artifact Registry
# and deploy it on Cloud Run when a PR is merged into the "main"
# branch.

name: 'Deploy to staging on PR merge'

on:
  pull_request:
    branches: 
      - main
    types:
      - closed

env:
  PROJECT_ID: 'windy-orb-218701'
  REGION: 'us-central1'
  DOCKER_REPO: 'deploydocus'
  SERVICE: 'deploydocus-staging'

jobs:
  build:
    if: github.event.pull_request.merged == true  # Ensures the PR was merged, not just closed
    environment: staging
    runs-on: 'ubuntu-latest'

    permissions:
      contents: 'read'
      id-token: 'write'

    outputs:  # Define job-level outputs
      image_name: ${{ steps.generate-image-name.outputs.image_name }}

    steps:
      - name: 'Checkout'
        uses: 'actions/checkout@v4'
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.SERVICE_ACCOUNT}}'
          token_format: 'access_token'
      - name: 'Docker Auth'
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: '${{ steps.auth.outputs.access_token }}'
          registry: '${{ env.REGION }}-docker.pkg.dev'
      - name: Generate github sha
        id: generate-github-sha
        run: echo "github_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Generate version
        id: generate-version
        run: echo "version=staging-$(date +%Y-%m-%d)-${{ steps.generate-github-sha.outputs.github_sha }}" >> $GITHUB_OUTPUT
      - name: Generate image name
        id: generate-image-name
        run: echo "image_name=${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.DOCKER_REPO }}/${{ env.SERVICE }}:${{ steps.generate-version.outputs.version }}" >> $GITHUB_OUTPUT
      - name: Build and Push Container
        run: |-
          docker build -t "${{ steps.generate-image-name.outputs.image_name }}" --build-arg build_date=$(date +%Y-%m-%d) --build-arg version=$(date +%Y-%m-%d)-${{ steps.generate-github-sha.outputs.github_sha }} ./
          docker push "${{ steps.generate-image-name.outputs.image_name }}"
  
  deploy:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v2'
        with:
          workload_identity_provider: '${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}'
          service_account: '${{ secrets.SERVICE_ACCOUNT}}'
          token_format: 'access_token'
      - name: 'Deploy to Cloud Run'
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          service: '${{ env.SERVICE }}'
          region: '${{ env.REGION }}'
          image: '${{ needs.build.outputs.image_name }}'
      # If required, use the Cloud Run URL output in later steps
      - name: 'Show output'
        run: |2-
          echo ${{ steps.deploy.outputs.url }}
